 start : program 	<Line: 1-22>
  program : unit 	<Line: 1-22>
   unit : func_definition 	<Line: 1-22>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-22>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     ID : main	<Line: 1>
     LPAREN : (	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL 	<Line: 1-22>
      LCURL : {	<Line: 1>
      statements : statements statement 	<Line: 2-21>
       statements : statements statement 	<Line: 2-17>
        statements : statements statement 	<Line: 2-7>
         statements : statements statement 	<Line: 2-6>
          statements : statements statement 	<Line: 2-5>
           statements : statements statement 	<Line: 2-4>
            statements : statements statement 	<Line: 2-3>
             statements : statement 	<Line: 2-2>
              statement : var_declaration 	<Line: 2-2>
               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
                type_specifier : INT 	<Line: 2-2>
                 INT : int	<Line: 2>
                declaration_list : declaration_list COMMA ID 	<Line: 2-2>
                 declaration_list : declaration_list COMMA ID 	<Line: 2-2>
                  declaration_list : declaration_list COMMA ID 	<Line: 2-2>
                   declaration_list : declaration_list COMMA ID 	<Line: 2-2>
                    declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 2-2>
                     declaration_list : ID 	<Line: 2-2>
                      ID : step	<Line: 2>
                     COMMA : ,	<Line: 2>
                     ID : array	<Line: 2>
                     LSQUARE : [	<Line: 2>
                     CONST_INT : 5	<Line: 2>
                     RSQUARE : ]	<Line: 2>
                    COMMA : ,	<Line: 2>
                    ID : x	<Line: 2>
                   COMMA : ,	<Line: 2>
                   ID : l	<Line: 2>
                  COMMA : ,	<Line: 2>
                  ID : j	<Line: 2>
                 COMMA : ,	<Line: 2>
                 ID : key	<Line: 2>
                SEMICOLON : ;	<Line: 2>
             statement : expression_statement 	<Line: 3-3>
              expression_statement : expression SEMICOLON 	<Line: 3-3>
               expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
                variable : ID LSQUARE expression RSQUARE 	<Line: 3-3>
                 ID : array	<Line: 3>
                 LSQUARE : [	<Line: 3>
                 expression : logic_expression 	<Line: 3-3>
                  logic_expression : rel_expression 	<Line: 3-3>
                   rel_expression : simple_expression 	<Line: 3-3>
                    simple_expression : term 	<Line: 3-3>
                     term : unary_expression 	<Line: 3-3>
                      unary_expression : factor 	<Line: 3-3>
                       factor : CONST_INT 	<Line: 3-3>
                        CONST_INT : 0	<Line: 3>
                 RSQUARE : ]	<Line: 3>
                ASSIGNOP : =	<Line: 3>
                logic_expression : rel_expression 	<Line: 3-3>
                 rel_expression : simple_expression 	<Line: 3-3>
                  simple_expression : term 	<Line: 3-3>
                   term : unary_expression 	<Line: 3-3>
                    unary_expression : factor 	<Line: 3-3>
                     factor : CONST_INT 	<Line: 3-3>
                      CONST_INT : 9	<Line: 3>
               SEMICOLON : ;	<Line: 3>
            statement : expression_statement 	<Line: 4-4>
             expression_statement : expression SEMICOLON 	<Line: 4-4>
              expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
               variable : ID LSQUARE expression RSQUARE 	<Line: 4-4>
                ID : array	<Line: 4>
                LSQUARE : [	<Line: 4>
                expression : logic_expression 	<Line: 4-4>
                 logic_expression : rel_expression 	<Line: 4-4>
                  rel_expression : simple_expression 	<Line: 4-4>
                   simple_expression : term 	<Line: 4-4>
                    term : unary_expression 	<Line: 4-4>
                     unary_expression : factor 	<Line: 4-4>
                      factor : CONST_INT 	<Line: 4-4>
                       CONST_INT : 1	<Line: 4>
                RSQUARE : ]	<Line: 4>
               ASSIGNOP : =	<Line: 4>
               logic_expression : rel_expression 	<Line: 4-4>
                rel_expression : simple_expression 	<Line: 4-4>
                 simple_expression : term 	<Line: 4-4>
                  term : unary_expression 	<Line: 4-4>
                   unary_expression : factor 	<Line: 4-4>
                    factor : CONST_INT 	<Line: 4-4>
                     CONST_INT : 4	<Line: 4>
              SEMICOLON : ;	<Line: 4>
           statement : expression_statement 	<Line: 5-5>
            expression_statement : expression SEMICOLON 	<Line: 5-5>
             expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
              variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>
               ID : array	<Line: 5>
               LSQUARE : [	<Line: 5>
               expression : logic_expression 	<Line: 5-5>
                logic_expression : rel_expression 	<Line: 5-5>
                 rel_expression : simple_expression 	<Line: 5-5>
                  simple_expression : term 	<Line: 5-5>
                   term : unary_expression 	<Line: 5-5>
                    unary_expression : factor 	<Line: 5-5>
                     factor : CONST_INT 	<Line: 5-5>
                      CONST_INT : 2	<Line: 5>
               RSQUARE : ]	<Line: 5>
              ASSIGNOP : =	<Line: 5>
              logic_expression : rel_expression 	<Line: 5-5>
               rel_expression : simple_expression 	<Line: 5-5>
                simple_expression : term 	<Line: 5-5>
                 term : unary_expression 	<Line: 5-5>
                  unary_expression : factor 	<Line: 5-5>
                   factor : CONST_INT 	<Line: 5-5>
                    CONST_INT : 7	<Line: 5>
             SEMICOLON : ;	<Line: 5>
          statement : expression_statement 	<Line: 6-6>
           expression_statement : expression SEMICOLON 	<Line: 6-6>
            expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
             variable : ID LSQUARE expression RSQUARE 	<Line: 6-6>
              ID : array	<Line: 6>
              LSQUARE : [	<Line: 6>
              expression : logic_expression 	<Line: 6-6>
               logic_expression : rel_expression 	<Line: 6-6>
                rel_expression : simple_expression 	<Line: 6-6>
                 simple_expression : term 	<Line: 6-6>
                  term : unary_expression 	<Line: 6-6>
                   unary_expression : factor 	<Line: 6-6>
                    factor : CONST_INT 	<Line: 6-6>
                     CONST_INT : 3	<Line: 6>
              RSQUARE : ]	<Line: 6>
             ASSIGNOP : =	<Line: 6>
             logic_expression : rel_expression 	<Line: 6-6>
              rel_expression : simple_expression 	<Line: 6-6>
               simple_expression : term 	<Line: 6-6>
                term : unary_expression 	<Line: 6-6>
                 unary_expression : factor 	<Line: 6-6>
                  factor : CONST_INT 	<Line: 6-6>
                   CONST_INT : 12	<Line: 6>
            SEMICOLON : ;	<Line: 6>
         statement : expression_statement 	<Line: 7-7>
          expression_statement : expression SEMICOLON 	<Line: 7-7>
           expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
            variable : ID LSQUARE expression RSQUARE 	<Line: 7-7>
             ID : array	<Line: 7>
             LSQUARE : [	<Line: 7>
             expression : logic_expression 	<Line: 7-7>
              logic_expression : rel_expression 	<Line: 7-7>
               rel_expression : simple_expression 	<Line: 7-7>
                simple_expression : term 	<Line: 7-7>
                 term : unary_expression 	<Line: 7-7>
                  unary_expression : factor 	<Line: 7-7>
                   factor : CONST_INT 	<Line: 7-7>
                    CONST_INT : 4	<Line: 7>
             RSQUARE : ]	<Line: 7>
            ASSIGNOP : =	<Line: 7>
            logic_expression : rel_expression 	<Line: 7-7>
             rel_expression : simple_expression 	<Line: 7-7>
              simple_expression : term 	<Line: 7-7>
               term : unary_expression 	<Line: 7-7>
                unary_expression : factor 	<Line: 7-7>
                 factor : CONST_INT 	<Line: 7-7>
                  CONST_INT : 2	<Line: 7>
           SEMICOLON : ;	<Line: 7>
        statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 8-17>
         FOR : for	<Line: 8>
         LPAREN : (	<Line: 8>
         expression_statement : expression SEMICOLON 	<Line: 8-8>
          expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
           variable : ID 	<Line: 8-8>
            ID : step	<Line: 8>
           ASSIGNOP : =	<Line: 8>
           logic_expression : rel_expression 	<Line: 8-8>
            rel_expression : simple_expression 	<Line: 8-8>
             simple_expression : term 	<Line: 8-8>
              term : unary_expression 	<Line: 8-8>
               unary_expression : factor 	<Line: 8-8>
                factor : CONST_INT 	<Line: 8-8>
                 CONST_INT : 0	<Line: 8>
          SEMICOLON : ;	<Line: 8>
         expression_statement : expression SEMICOLON 	<Line: 8-8>
          expression : logic_expression 	<Line: 8-8>
           logic_expression : rel_expression 	<Line: 8-8>
            rel_expression : simple_expression RELOP simple_expression 	<Line: 8-8>
             simple_expression : term 	<Line: 8-8>
              term : unary_expression 	<Line: 8-8>
               unary_expression : factor 	<Line: 8-8>
                factor : variable 	<Line: 8-8>
                 variable : ID 	<Line: 8-8>
                  ID : step	<Line: 8>
             RELOP : <	<Line: 8>
             simple_expression : term 	<Line: 8-8>
              term : unary_expression 	<Line: 8-8>
               unary_expression : factor 	<Line: 8-8>
                factor : CONST_INT 	<Line: 8-8>
                 CONST_INT : 5	<Line: 8>
          SEMICOLON : ;	<Line: 8>
         expression : logic_expression 	<Line: 8-8>
          logic_expression : rel_expression 	<Line: 8-8>
           rel_expression : simple_expression 	<Line: 8-8>
            simple_expression : term 	<Line: 8-8>
             term : unary_expression 	<Line: 8-8>
              unary_expression : factor 	<Line: 8-8>
               factor : variable INCOP 	<Line: 8-8>
                variable : ID 	<Line: 8-8>
                 ID : step	<Line: 8>
                INCOP : ++	<Line: 8>
         RPAREN : )	<Line: 8>
         statement : compound_statement 	<Line: 8-17>
          compound_statement : LCURL statements RCURL 	<Line: 8-17>
           LCURL : {	<Line: 8>
           statements : statements statement 	<Line: 9-16>
            statements : statements statement 	<Line: 9-15>
             statements : statements statement 	<Line: 9-11>
              statements : statements statement 	<Line: 9-10>
               statements : statement 	<Line: 9-9>
                statement : expression_statement 	<Line: 9-9>
                 expression_statement : expression SEMICOLON 	<Line: 9-9>
                  expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
                   variable : ID 	<Line: 9-9>
                    ID : key	<Line: 9>
                   ASSIGNOP : =	<Line: 9>
                   logic_expression : rel_expression 	<Line: 9-9>
                    rel_expression : simple_expression 	<Line: 9-9>
                     simple_expression : term 	<Line: 9-9>
                      term : unary_expression 	<Line: 9-9>
                       unary_expression : factor 	<Line: 9-9>
                        factor : variable 	<Line: 9-9>
                         variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                          ID : array	<Line: 9>
                          LSQUARE : [	<Line: 9>
                          expression : logic_expression 	<Line: 9-9>
                           logic_expression : rel_expression 	<Line: 9-9>
                            rel_expression : simple_expression 	<Line: 9-9>
                             simple_expression : term 	<Line: 9-9>
                              term : unary_expression 	<Line: 9-9>
                               unary_expression : factor 	<Line: 9-9>
                                factor : variable 	<Line: 9-9>
                                 variable : ID 	<Line: 9-9>
                                  ID : step	<Line: 9>
                          RSQUARE : ]	<Line: 9>
                  SEMICOLON : ;	<Line: 9>
               statement : expression_statement 	<Line: 10-10>
                expression_statement : expression SEMICOLON 	<Line: 10-10>
                 expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                  variable : ID 	<Line: 10-10>
                   ID : j	<Line: 10>
                  ASSIGNOP : =	<Line: 10>
                  logic_expression : rel_expression 	<Line: 10-10>
                   rel_expression : simple_expression 	<Line: 10-10>
                    simple_expression : simple_expression ADDOP term 	<Line: 10-10>
                     simple_expression : term 	<Line: 10-10>
                      term : unary_expression 	<Line: 10-10>
                       unary_expression : factor 	<Line: 10-10>
                        factor : variable 	<Line: 10-10>
                         variable : ID 	<Line: 10-10>
                          ID : step	<Line: 10>
                     ADDOP : -	<Line: 10>
                     term : unary_expression 	<Line: 10-10>
                      unary_expression : factor 	<Line: 10-10>
                       factor : CONST_INT 	<Line: 10-10>
                        CONST_INT : 1	<Line: 10>
                 SEMICOLON : ;	<Line: 10>
              statement : expression_statement 	<Line: 11-11>
               expression_statement : expression SEMICOLON 	<Line: 11-11>
                expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                 variable : ID 	<Line: 11-11>
                  ID : l	<Line: 11>
                 ASSIGNOP : =	<Line: 11>
                 logic_expression : rel_expression 	<Line: 11-11>
                  rel_expression : simple_expression 	<Line: 11-11>
                   simple_expression : term 	<Line: 11-11>
                    term : unary_expression 	<Line: 11-11>
                     unary_expression : factor 	<Line: 11-11>
                      factor : variable 	<Line: 11-11>
                       variable : ID LSQUARE expression RSQUARE 	<Line: 11-11>
                        ID : array	<Line: 11>
                        LSQUARE : [	<Line: 11>
                        expression : logic_expression 	<Line: 11-11>
                         logic_expression : rel_expression 	<Line: 11-11>
                          rel_expression : simple_expression 	<Line: 11-11>
                           simple_expression : term 	<Line: 11-11>
                            term : unary_expression 	<Line: 11-11>
                             unary_expression : factor 	<Line: 11-11>
                              factor : variable 	<Line: 11-11>
                               variable : ID 	<Line: 11-11>
                                ID : j	<Line: 11>
                        RSQUARE : ]	<Line: 11>
                SEMICOLON : ;	<Line: 11>
             statement : WHILE LPAREN expression RPAREN statement 	<Line: 12-15>
              WHILE : while	<Line: 12>
              LPAREN : (	<Line: 12>
              expression : logic_expression 	<Line: 12-12>
               logic_expression : rel_expression LOGICOP rel_expression 	<Line: 12-12>
                rel_expression : simple_expression RELOP simple_expression 	<Line: 12-12>
                 simple_expression : term 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : variable 	<Line: 12-12>
                     variable : ID 	<Line: 12-12>
                      ID : key	<Line: 12>
                 RELOP : <	<Line: 12>
                 simple_expression : term 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : variable 	<Line: 12-12>
                     variable : ID 	<Line: 12-12>
                      ID : l	<Line: 12>
                LOGICOP : &&	<Line: 12>
                rel_expression : simple_expression RELOP simple_expression 	<Line: 12-12>
                 simple_expression : term 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : variable 	<Line: 12-12>
                     variable : ID 	<Line: 12-12>
                      ID : j	<Line: 12>
                 RELOP : >=	<Line: 12>
                 simple_expression : term 	<Line: 12-12>
                  term : unary_expression 	<Line: 12-12>
                   unary_expression : factor 	<Line: 12-12>
                    factor : CONST_INT 	<Line: 12-12>
                     CONST_INT : 0	<Line: 12>
              RPAREN : )	<Line: 12>
              statement : compound_statement 	<Line: 12-15>
               compound_statement : LCURL statements RCURL 	<Line: 12-15>
                LCURL : {	<Line: 12>
                statements : statements statement 	<Line: 13-14>
                 statements : statement 	<Line: 13-13>
                  statement : expression_statement 	<Line: 13-13>
                   expression_statement : expression SEMICOLON 	<Line: 13-13>
                    expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
                     variable : ID LSQUARE expression RSQUARE 	<Line: 13-13>
                      ID : array	<Line: 13>
                      LSQUARE : [	<Line: 13>
                      expression : logic_expression 	<Line: 13-13>
                       logic_expression : rel_expression 	<Line: 13-13>
                        rel_expression : simple_expression 	<Line: 13-13>
                         simple_expression : simple_expression ADDOP term 	<Line: 13-13>
                          simple_expression : term 	<Line: 13-13>
                           term : unary_expression 	<Line: 13-13>
                            unary_expression : factor 	<Line: 13-13>
                             factor : variable 	<Line: 13-13>
                              variable : ID 	<Line: 13-13>
                               ID : j	<Line: 13>
                          ADDOP : +	<Line: 13>
                          term : unary_expression 	<Line: 13-13>
                           unary_expression : factor 	<Line: 13-13>
                            factor : CONST_INT 	<Line: 13-13>
                             CONST_INT : 1	<Line: 13>
                      RSQUARE : ]	<Line: 13>
                     ASSIGNOP : =	<Line: 13>
                     logic_expression : rel_expression 	<Line: 13-13>
                      rel_expression : simple_expression 	<Line: 13-13>
                       simple_expression : term 	<Line: 13-13>
                        term : unary_expression 	<Line: 13-13>
                         unary_expression : factor 	<Line: 13-13>
                          factor : variable 	<Line: 13-13>
                           variable : ID LSQUARE expression RSQUARE 	<Line: 13-13>
                            ID : array	<Line: 13>
                            LSQUARE : [	<Line: 13>
                            expression : logic_expression 	<Line: 13-13>
                             logic_expression : rel_expression 	<Line: 13-13>
                              rel_expression : simple_expression 	<Line: 13-13>
                               simple_expression : term 	<Line: 13-13>
                                term : unary_expression 	<Line: 13-13>
                                 unary_expression : factor 	<Line: 13-13>
                                  factor : variable 	<Line: 13-13>
                                   variable : ID 	<Line: 13-13>
                                    ID : j	<Line: 13>
                            RSQUARE : ]	<Line: 13>
                    SEMICOLON : ;	<Line: 13>
                 statement : expression_statement 	<Line: 14-14>
                  expression_statement : expression SEMICOLON 	<Line: 14-14>
                   expression : logic_expression 	<Line: 14-14>
                    logic_expression : rel_expression 	<Line: 14-14>
                     rel_expression : simple_expression 	<Line: 14-14>
                      simple_expression : term 	<Line: 14-14>
                       term : unary_expression 	<Line: 14-14>
                        unary_expression : factor 	<Line: 14-14>
                         factor : variable DECOP 	<Line: 14-14>
                          variable : ID 	<Line: 14-14>
                           ID : j	<Line: 14>
                          DECOP : --	<Line: 14>
                   SEMICOLON : ;	<Line: 14>
                RCURL : }	<Line: 15>
            statement : expression_statement 	<Line: 16-16>
             expression_statement : expression SEMICOLON 	<Line: 16-16>
              expression : variable ASSIGNOP logic_expression 	<Line: 16-16>
               variable : ID LSQUARE expression RSQUARE 	<Line: 16-16>
                ID : array	<Line: 16>
                LSQUARE : [	<Line: 16>
                expression : logic_expression 	<Line: 16-16>
                 logic_expression : rel_expression 	<Line: 16-16>
                  rel_expression : simple_expression 	<Line: 16-16>
                   simple_expression : simple_expression ADDOP term 	<Line: 16-16>
                    simple_expression : term 	<Line: 16-16>
                     term : unary_expression 	<Line: 16-16>
                      unary_expression : factor 	<Line: 16-16>
                       factor : variable 	<Line: 16-16>
                        variable : ID 	<Line: 16-16>
                         ID : j	<Line: 16>
                    ADDOP : +	<Line: 16>
                    term : unary_expression 	<Line: 16-16>
                     unary_expression : factor 	<Line: 16-16>
                      factor : CONST_INT 	<Line: 16-16>
                       CONST_INT : 1	<Line: 16>
                RSQUARE : ]	<Line: 16>
               ASSIGNOP : =	<Line: 16>
               logic_expression : rel_expression 	<Line: 16-16>
                rel_expression : simple_expression 	<Line: 16-16>
                 simple_expression : term 	<Line: 16-16>
                  term : unary_expression 	<Line: 16-16>
                   unary_expression : factor 	<Line: 16-16>
                    factor : variable 	<Line: 16-16>
                     variable : ID 	<Line: 16-16>
                      ID : key	<Line: 16>
              SEMICOLON : ;	<Line: 16>
           RCURL : }	<Line: 17>
       statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 18-21>
        FOR : for	<Line: 18>
        LPAREN : (	<Line: 18>
        expression_statement : expression SEMICOLON 	<Line: 18-18>
         expression : variable ASSIGNOP logic_expression 	<Line: 18-18>
          variable : ID 	<Line: 18-18>
           ID : step	<Line: 18>
          ASSIGNOP : =	<Line: 18>
          logic_expression : rel_expression 	<Line: 18-18>
           rel_expression : simple_expression 	<Line: 18-18>
            simple_expression : term 	<Line: 18-18>
             term : unary_expression 	<Line: 18-18>
              unary_expression : factor 	<Line: 18-18>
               factor : CONST_INT 	<Line: 18-18>
                CONST_INT : 0	<Line: 18>
         SEMICOLON : ;	<Line: 18>
        expression_statement : expression SEMICOLON 	<Line: 18-18>
         expression : logic_expression 	<Line: 18-18>
          logic_expression : rel_expression 	<Line: 18-18>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 18-18>
            simple_expression : term 	<Line: 18-18>
             term : unary_expression 	<Line: 18-18>
              unary_expression : factor 	<Line: 18-18>
               factor : variable 	<Line: 18-18>
                variable : ID 	<Line: 18-18>
                 ID : step	<Line: 18>
            RELOP : <	<Line: 18>
            simple_expression : term 	<Line: 18-18>
             term : unary_expression 	<Line: 18-18>
              unary_expression : factor 	<Line: 18-18>
               factor : CONST_INT 	<Line: 18-18>
                CONST_INT : 5	<Line: 18>
         SEMICOLON : ;	<Line: 18>
        expression : logic_expression 	<Line: 18-18>
         logic_expression : rel_expression 	<Line: 18-18>
          rel_expression : simple_expression 	<Line: 18-18>
           simple_expression : term 	<Line: 18-18>
            term : unary_expression 	<Line: 18-18>
             unary_expression : factor 	<Line: 18-18>
              factor : variable INCOP 	<Line: 18-18>
               variable : ID 	<Line: 18-18>
                ID : step	<Line: 18>
               INCOP : ++	<Line: 18>
        RPAREN : )	<Line: 18>
        statement : compound_statement 	<Line: 18-21>
         compound_statement : LCURL statements RCURL 	<Line: 18-21>
          LCURL : {	<Line: 18>
          statements : statements statement 	<Line: 19-20>
           statements : statement 	<Line: 19-19>
            statement : expression_statement 	<Line: 19-19>
             expression_statement : expression SEMICOLON 	<Line: 19-19>
              expression : variable ASSIGNOP logic_expression 	<Line: 19-19>
               variable : ID 	<Line: 19-19>
                ID : x	<Line: 19>
               ASSIGNOP : =	<Line: 19>
               logic_expression : rel_expression 	<Line: 19-19>
                rel_expression : simple_expression 	<Line: 19-19>
                 simple_expression : term 	<Line: 19-19>
                  term : unary_expression 	<Line: 19-19>
                   unary_expression : factor 	<Line: 19-19>
                    factor : variable 	<Line: 19-19>
                     variable : ID LSQUARE expression RSQUARE 	<Line: 19-19>
                      ID : array	<Line: 19>
                      LSQUARE : [	<Line: 19>
                      expression : logic_expression 	<Line: 19-19>
                       logic_expression : rel_expression 	<Line: 19-19>
                        rel_expression : simple_expression 	<Line: 19-19>
                         simple_expression : term 	<Line: 19-19>
                          term : unary_expression 	<Line: 19-19>
                           unary_expression : factor 	<Line: 19-19>
                            factor : variable 	<Line: 19-19>
                             variable : ID 	<Line: 19-19>
                              ID : step	<Line: 19>
                      RSQUARE : ]	<Line: 19>
              SEMICOLON : ;	<Line: 19>
           statement : expression_statement 	<Line: 20-20>
            expression_statement : expression SEMICOLON 	<Line: 20-20>
             expression : logic_expression 	<Line: 20-20>
              logic_expression : rel_expression 	<Line: 20-20>
               rel_expression : simple_expression 	<Line: 20-20>
                simple_expression : term 	<Line: 20-20>
                 term : unary_expression 	<Line: 20-20>
                  unary_expression : factor 	<Line: 20-20>
                   factor : ID LPAREN argument_list RPAREN 	<Line: 20-20>
                    ID : println	<Line: 20>
                    LPAREN : (	<Line: 20>
                    argument_list : arguments 	<Line: 20-20>
                     arguments : logic_expression 	<Line: 20-20>
                      logic_expression : rel_expression 	<Line: 20-20>
                       rel_expression : simple_expression 	<Line: 20-20>
                        simple_expression : term 	<Line: 20-20>
                         term : unary_expression 	<Line: 20-20>
                          unary_expression : factor 	<Line: 20-20>
                           factor : variable 	<Line: 20-20>
                            variable : ID 	<Line: 20-20>
                             ID : x	<Line: 20>
                    RPAREN : )	<Line: 20>
             SEMICOLON : ;	<Line: 20>
          RCURL : }	<Line: 21>
      RCURL : }	<Line: 22>
