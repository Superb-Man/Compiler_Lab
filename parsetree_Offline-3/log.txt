Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme step found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 2: Token <ID> Lexeme array found
Line# 2: Token <LSQUARE> Lexeme [ found
Line# 2: Token <CONST_INT> Lexeme 5 found
Line# 2: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE
Line# 2: Token <COMMA> Lexeme , found
Line# 2: Token <ID> Lexeme x found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 2: Token <ID> Lexeme l found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 2: Token <ID> Lexeme j found
Line# 2: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 2: Token <ID> Lexeme key found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 3: Token <ID> Lexeme array found
Line# 3: Token <LSQUARE> Lexeme [ found
Line# 3: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 3: Token <ASSIGNOP> Lexeme = found
Line# 3: Token <CONST_INT> Lexeme 9 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 4: Token <ID> Lexeme array found
Line# 4: Token <LSQUARE> Lexeme [ found
Line# 4: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 4: Token <ASSIGNOP> Lexeme = found
Line# 4: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 5: Token <ID> Lexeme array found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 5: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 5: Token <ASSIGNOP> Lexeme = found
Line# 5: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 6: Token <ID> Lexeme array found
Line# 6: Token <LSQUARE> Lexeme [ found
Line# 6: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 6: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 6: Token <ASSIGNOP> Lexeme = found
Line# 6: Token <CONST_INT> Lexeme 12 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 7: Token <ID> Lexeme array found
Line# 7: Token <LSQUARE> Lexeme [ found
Line# 7: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 7: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 7: Token <ASSIGNOP> Lexeme = found
Line# 7: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 7: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 8: Token <FOR> Lexeme for found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme step found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
Line# 8: Token <ID> Lexeme step found
Line# 8: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 8: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
Line# 8: Token <ID> Lexeme step found
Line# 8: Token <INCOP> Lexeme ++ found
variable : ID
factor : variable INCOP
unary_expression : factor
term : unary_expression
Line# 8: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 8: Token <LCURL> Lexeme { found
Line# 9: Token <ID> Lexeme key found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 9: Token <ID> Lexeme array found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <ID> Lexeme step found
Line# 9: Token <RSQUARE> Lexeme ] found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 9: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 10: Token <ID> Lexeme j found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 10: Token <ID> Lexeme step found
Line# 10: Token <ADDOP> Lexeme - found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 10: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 11: Token <ID> Lexeme l found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 11: Token <ID> Lexeme array found
Line# 11: Token <LSQUARE> Lexeme [ found
Line# 11: Token <ID> Lexeme j found
Line# 11: Token <RSQUARE> Lexeme ] found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 11: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 12: Token <WHILE> Lexeme while found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <ID> Lexeme key found
Line# 12: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 12: Token <ID> Lexeme l found
Line# 12: Token <LOGICOP> Lexeme && found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 12: Token <ID> Lexeme j found
Line# 12: Token <RELOP> Lexeme >= found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 12: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 12: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
Line# 12: Token <LCURL> Lexeme { found
Line# 13: Token <ID> Lexeme array found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <ID> Lexeme j found
Line# 13: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 13: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <RSQUARE> Lexeme ] found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 13: Token <ASSIGNOP> Lexeme = found
Line# 13: Token <ID> Lexeme array found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <ID> Lexeme j found
Line# 13: Token <RSQUARE> Lexeme ] found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 13: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 14: Token <ID> Lexeme j found
Line# 14: Token <DECOPP> Lexeme -- found
variable : ID
factor : variable DECOP
unary_expression : factor
term : unary_expression
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	ScopeTable# 3
	ScopeTable# 2
	2--> <step, INT>
	4--> <key, INT>
	8--> <j, INT>
	10--> <array, ARRAY, INT> <l, INT>
	11--> <x, INT>
	ScopeTable# 1
	2--> <main, FUNCTION, INT>
statement : compound_statement
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement
Line# 16: Token <ID> Lexeme array found
Line# 16: Token <LSQUARE> Lexeme [ found
Line# 16: Token <ID> Lexeme j found
Line# 16: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 16: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 16: Token <RSQUARE> Lexeme ] found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 16: Token <ASSIGNOP> Lexeme = found
Line# 16: Token <ID> Lexeme key found
Line# 16: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 17: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 2
	2--> <step, INT>
	4--> <key, INT>
	8--> <j, INT>
	10--> <array, ARRAY, INT> <l, INT>
	11--> <x, INT>
	ScopeTable# 1
	2--> <main, FUNCTION, INT>
statement : compound_statement
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement
Line# 18: Token <FOR> Lexeme for found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme step found
Line# 18: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 18: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 18: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
Line# 18: Token <ID> Lexeme step found
Line# 18: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 18: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 18: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
Line# 18: Token <ID> Lexeme step found
Line# 18: Token <INCOP> Lexeme ++ found
variable : ID
factor : variable INCOP
unary_expression : factor
term : unary_expression
Line# 18: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 18: Token <LCURL> Lexeme { found
Line# 19: Token <ID> Lexeme x found
Line# 19: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 19: Token <ID> Lexeme array found
Line# 19: Token <LSQUARE> Lexeme [ found
Line# 19: Token <ID> Lexeme step found
Line# 19: Token <RSQUARE> Lexeme ] found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 19: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 20: Token <ID> Lexeme println found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme x found
Line# 20: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 21: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 5
	ScopeTable# 2
	2--> <step, INT>
	4--> <key, INT>
	8--> <j, INT>
	10--> <array, ARRAY, INT> <l, INT>
	11--> <x, INT>
	ScopeTable# 1
	2--> <main, FUNCTION, INT>
statement : compound_statement
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement
Line# 22: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	2--> <step, INT>
	4--> <key, INT>
	8--> <j, INT>
	10--> <array, ARRAY, INT> <l, INT>
	11--> <x, INT>
	ScopeTable# 1
	2--> <main, FUNCTION, INT>
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
	ScopeTable# 1
	2--> <main, FUNCTION, INT>
